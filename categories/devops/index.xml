<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devops on 套路猿</title>
    <link>/categories/devops/</link>
    <description>Recent content in devops on 套路猿</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 08 Jun 2023 21:36:22 +0800</lastBuildDate><atom:link href="/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>k8s &#43; docker 基于 kubeadm 多节点集群部署</title>
      <link>/posts/install-k8s/</link>
      <pubDate>Thu, 08 Jun 2023 21:36:22 +0800</pubDate>
      
      <guid>/posts/install-k8s/</guid>
      <description>k8s + docker 基于 kubeadm 多节点集群部署 博客文章地址:https://blog.taoluyuan.com/posts/install-k8s/
各个节点环境准备 [环境准备] 这章的操作都要在两台机器上分别执行,我准备了两台机器,如下:
一台master,一台node 主机1(master) ip:192.168.31.122,主机2 192.168.31.166 已转好docker环境 1. docker 安装 如已经安装好docker 可跳过 docker 官方安装 https://docs.docker.com/engine/install/ubuntu/ 有点慢 清华大学 镜像安装方法 https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/
安装依赖
sudo apt-get install ca-certificates curl gnupg sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg echo \ &amp;#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \ &amp;#34;$(. /etc/os-release &amp;amp;&amp;amp; echo &amp;#34;$VERSION_CODENAME&amp;#34;)&amp;#34; stable&amp;#34; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null 安装 docker-ce</description>
    </item>
    
    <item>
      <title>k8s istio 集成 多版本应用服务 和 网格监测</title>
      <link>/posts/istio-getting-started/</link>
      <pubDate>Sun, 04 Jun 2023 15:37:03 +0800</pubDate>
      
      <guid>/posts/istio-getting-started/</guid>
      <description>说明 博客文章地址:https://blog.taoluyuan.com/posts/istio-getting-started/ 本主要是内容:
使用 istioctl 安装 istio 采用 istio 官方提供 的 应用bookinfo,实现多版本的服务应用部署 istio 网关 gateway,vs,dr 的基本使用 利用监测工具 prometheus,grafana,jaeger 查看 istio 的监控数据 文章提到的yaml,也是istio官方提供的,整理后单独放到github github k8s-istio-practice 根目录 makefile 集成了相关命令,你们可以直接通过 makefile 安装 service,gateway,vs,dr,监控,以实现跟文章一样的效果
istio 官方文档:https://istio.io/latest/zh/docs/
安装 参考官方安装文档:官方demo配置组合安装文档
采用 demo 配置组合,它包含了一组专为测试准备的功能集合 curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.17.2 sh - &amp;amp;&amp;amp; \ cd istio-1.17.2 &amp;amp;&amp;amp; \ export PATH=$PWD/bin:$PATH &amp;amp;&amp;amp; \ istioctl install --set profile=demo 给命名空间添加标签，指示 在 default命名空间 部署应用的时候，自动注入 Envoy kubectl label namespace default istio-injection=enabled 安装的istio相关资源在 istio-system 命名空间下,可以通过以下查看安装的资源 k get all -n istio-system bookinfo 应用程序 bookinfo 架构及介绍 bookinfo 由四个单独的微服务构成 ,以下是官方对bookinfo的介绍,也可以直接看官方文档 istio-bookinfo</description>
    </item>
    
    <item>
      <title>通过 Github workflows CI/CD 自动化部署 Github Pages hugo 免费博客</title>
      <link>/posts/github-workflows/</link>
      <pubDate>Tue, 30 May 2023 10:29:04 +0800</pubDate>
      
      <guid>/posts/github-workflows/</guid>
      <description>通过 Github workflows CI/CD 自动化部署 Github Pages hugo 免费博客 文章博客地址：https://blog.taoluyuan.com/posts/github-workflows/
Github Workflows 介绍 GitHub Actions 介绍 GitHub 文档：https://docs.github.com/zh/actions/learn-github-actions/understanding-github-actions 官方介绍:GitHub Actions 是一种持续集成和持续交付 (CI/CD) 平台，可用于自动执行生成、测试和部署管道。 您可以创建工作流程来构建和测试存储库的每个拉取请求，或将合并的拉取请求部署到生产环境 流程及原理介绍 本文主要介绍使用GitHub Actions 来实现自动化部署博客网站 ,静态网站生成使用的是Hugo,部署使用的是Github pages,并且使用自定义域名。 本地写hugo-blog 博客,hugo-blog 是一个hugo的博客模板,使用hugo new site hugo-blog命令创建,可以在里面写markdown文件 写好后推送到github hugo-blog 仓库,触发github actions ci/cd,执行hugo命令生成静态网站,并且推送到github-pages 仓库 github-pages 仓库接收到推送后,会自动部署到github pages,公网可以通过 github pages 域名 访问,也可以通过CNAME配置自定义域名访问 Github Pages 介绍 Github Pages 是一个静态网站托管服务,可以通过github pages 托管静态网站,并且可以通过自定义域名访问 创建github pages 仓库,仓库名必须是username.github.io格式,username是你的github用户名,仓库名必须是这个,否则无法部署成功 访问地址就是 https://username.github.io 自定义域名访问,例如www.abc.com,在域名服务商添加CNAME记录,指向username.github.io, 然后在github pages 仓库设置中添加自定义域名, 这样通过www.abc.com 就能访问github pages 下面的 Actions 部分会介绍如何自动化部署到github pages,并且配置自定义域名 Hugo 介绍 Hugo 是一个静态网站生成器,可以通过markdown文件生成静态网站,官网:https://gohugo.</description>
    </item>
    
    <item>
      <title>frp 和 nginx 搭建一个内网穿透服务器</title>
      <link>/posts/frp-server/</link>
      <pubDate>Wed, 17 May 2023 22:15:05 +0800</pubDate>
      
      <guid>/posts/frp-server/</guid>
      <description>文章博客地址: https://blog.taoluyuan.com/posts/frp-server/
相关资料 frp下载 ：https://github.com/fatedier/frp 相关文档: https://github.com/fatedier/frp 下载 下载地址：https://github.com/fatedier/frp/releases 选择对应的版本进行下载
wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_linux_386.tar.gz 如果是windows需要下载windos版本
wget https://github.com/fatedier/frp/releases/download/v0.21.0/frp_0.21.0_darwin_amd64.tar.gz 下载后、我的服务端是centos 客户端是windows
服务端需要关注的文件是 frps、frps.ini 客户端需要关注的文件是 frpc（或者是frpc.exe）、frpc.ini
注意，如果运行的环境是windows就要运行windows版本的，也就是exe后缀的
配置服务端 配置文件 frps.ini [common] #服务端需要开启的端口（与客户端绑定的进行通信的端口） bind_port = 7000 #服务端需要开启的端口（访问客户端web服务自定义的端口号） vhost_http_port = 8081 auth_token = websong type = http custom_domains = abc.baidu.com auth_token = websong 配置文件说明 bind_port 服务端需要开启的端口 vhost_http_port
服务端需要开启的端口 auth_token 需要客户端的auth_token与此一样 type 其实除了http还有其他参数，比如tcp,这里只讲述http，其他的请看相关文档: https://github.com/fatedier/frp custom_domains 域名
具体接下来在配置客户端说明 启动服务 正常启动，ctrl+c能推出 ``` ./frps -c ./frps.ini
``` 后台启动
``` nohup ./frps -c .</description>
    </item>
    
    <item>
      <title>Makefile 与 docker 进行多服务 一次性构建</title>
      <link>/posts/docker-makefile/</link>
      <pubDate>Tue, 16 May 2023 22:49:57 +0800</pubDate>
      
      <guid>/posts/docker-makefile/</guid>
      <description>文章博客地址:https://blog.taoluyuan.com/posts/docker-makefile/
本机多服务一次性构建背景 本机开发多个服务,每个服务还会互相调用 正常情况,开发者需要在本地启动多个服务,并且手动调用 想着不使用gitlab ci/cd, 在本机快速通过 makefile+docker-compose 编排多个服务 可执行源码在:https://github.com/webws/go-moda/tree/main/example/tracing/moda_tracing 正常cicd流程 本机 makefile +docker 部署流程 开发者写好功能,本地 go build 为二进制包 dockerfile 基于 alpha 镜像,运行二进制包 docker-compose 编排执行 dockerfile 运行多个服 golang 服务说明 ├── api1_http │ ├── main.go ├── api2_http │ ├── main.go ├── api3_http │ ├── main.go ├── grpc │ ├── main.go ├── Makefile |── docker-compose.yaml 四个golang服务,只需要知道他们是golang服务即可,3个api,1个grpc
编写makefile SERVICES = api1_http api2_http api3_http grpc DOCKERFILE_CONTENT = FROM alpine:latest\nWORKDIR /app # 定义 alpine:3.12 镜像为基础镜像 IMAGE = alpine:3.</description>
    </item>
    
    <item>
      <title>golang 使用 OpenTelemetry 实现跨服务 全链路追踪</title>
      <link>/posts/opentelmetry/</link>
      <pubDate>Tue, 16 May 2023 22:39:14 +0800</pubDate>
      
      <guid>/posts/opentelmetry/</guid>
      <description>文章博客地址: https://blog.taoluyuan.com/posts/opentelmetry/
使用 OpenTelemetry 链路追踪说明 工作中常常会遇到需要查看服务调用关系,比如用户请求了一个接口 接口会调用其他grpc,http接口,或者内部的方法 这样的调用链路,如果出现了问题,我们需要快速的定位问题,这时候就需要一个工具来帮助我们查看调用链路 OpenTelemetry就是这样一个工具 本文大概以:main 函数初始化 OpenTelemetry、启动 http server、配置httpclient 请求服务 来进行说明 完整可执行源码在:opentelemetry-go 示例 示例代码已增加 grpc的链路追踪 服务链路关系 关系图 说明: 用户 请求 api1(echo server) 服务的 api1/bar api1 调用 Grpc 服务 api1 调用 api2 (gin server) 服务的 api2/bar api2 调用 api3 (echo server )服务的 api3/bar api3 调用 内部 调用方法 bar-&amp;gt;bar2-&amp;gt;bar3 安装jaeger 下载jaeger:我使用的是 jaeger-all-in-one 启动 jaeger: ~/tool/jaeger-1.31.0-linux-amd64/jaeger-all-in-one 默认查看面板 地址 http://localhost:16686/ tracer Batcher的地址,下面代码会体现: http://localhost:14268/api/traces 初始化 全局的 OpenTelemetry 这里openTelemetry 的exporter 以 jaeger 为例</description>
    </item>
    
  </channel>
</rss>
