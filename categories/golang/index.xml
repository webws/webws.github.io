<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 套路猿</title>
    <link>/categories/golang/</link>
    <description>Recent content in golang on 套路猿</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 27 Aug 2023 20:59:44 +0800</lastBuildDate><atom:link href="/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang 使用 viper 加载配置文件 自动反序列化到结构</title>
      <link>/posts/golang-viper-load/</link>
      <pubDate>Sun, 27 Aug 2023 20:59:44 +0800</pubDate>
      
      <guid>/posts/golang-viper-load/</guid>
      <description>文章博客地址:golang 使用 viper 加载配置 自动反序列化到结构
golang使用 viper 无需设置 mapstructure tag 根据配置文件后缀 自动返序列化到结构 解决结构有下划线的字段解析不成功问题 viper 正常加载配置文件 golang viper 其中可以用来 查找、加载和反序列化JSON、TOML、YAML、HCL、INI、envfile和格式的配置文件
配置文件 test_toml.toml
http_addr = &amp;#34;:8082&amp;#34; grpc_addr = &amp;#34;:8083&amp;#34; jaeger_url= &amp;#34;http://localhost:14268/api/traces&amp;#34; tracing= true golang代码
type ConfigTest struct { HttpAddr string `json:&amp;#34;http_addr&amp;#34; toml:&amp;#34;http_addr&amp;#34; yaml:&amp;#34;http_addr&amp;#34;` GrpcAddr string `json:&amp;#34;grpc_addr&amp;#34; toml:&amp;#34;grpc_addr&amp;#34; yaml:&amp;#34;grpc_addr&amp;#34;` JaegerUrl string `json:&amp;#34;jaeger_url&amp;#34; toml:&amp;#34;jaeger_url&amp;#34; yaml:&amp;#34;jaeger_url&amp;#34; mapstructure:&amp;#34;jaeger_url&amp;#34;` Tracing bool `toml:&amp;#34;tracing&amp;#34; json:&amp;#34;tracing&amp;#34; yaml:&amp;#34;tracing&amp;#34; ` // opentelemetry tracing } // jaeger 加载配置文件 func TestSourceFile_Unmarshal(t *testing.T) { filePath := &amp;#34;.</description>
    </item>
    
  </channel>
</rss>
