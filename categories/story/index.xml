<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Story on 套路猿</title>
    <link>/categories/story/</link>
    <description>Recent content in Story on 套路猿</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 16 May 2023 18:28:26 +0800</lastBuildDate><atom:link href="/categories/story/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ss</title>
      <link>/posts/ss/</link>
      <pubDate>Tue, 16 May 2023 18:28:26 +0800</pubDate>
      
      <guid>/posts/ss/</guid>
      <description>当然，我可以帮您写一篇 Markdown 示例！请看下面的文本：
Markdown 语法示例 Markdown 是一种轻量级标记语言，它使用简单易懂的语法来排版文档和增强可读性。下面是一个包含了常见 Markdown 语法的示例。
标题 在 Markdown 中添加标题非常简单，只需要在行首使用一到六个井号即可表示不同层次的标题。例如：
一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 段落 段落是 Markdown 文档中最基本的单元，可以通过空行来区分不同的段落。例如：
这是一段文字。
这是另外一段文字。
序号 如果您需要列出一些有序的内容，可以使用有序列表语法。在列表项前面加上数字和一个句号即可。例如：
第一项 第二项 第三项 代码块 如果您需要插入代码块，可以用三个反引号（```）将代码块围住。例如：
print(&amp;#34;Hello, World!&amp;#34;) 图片 插入图片也很简单，只需要使用 ![Alt Text](image URL) 语法结构。例如：
跳转链接 Markdown 可以非常方便地插入超链接，使用 [link text](URL) 语法结构。例如：
百度搜索引擎
这是一个包含了常见 Markdown 语法的示例，希望对您有所帮助！</description>
    </item>
    
    <item>
      <title>User Markdown</title>
      <link>/posts/user-markdown/</link>
      <pubDate>Tue, 16 May 2023 17:50:03 +0800</pubDate>
      
      <guid>/posts/user-markdown/</guid>
      <description>当然，我可以帮您写一篇 Markdown 示例！请看下面的文本：
Markdown 示例 Markdown 是一种轻量级标记语言，使用简单易懂的语法来为不同的内容添加不同的样式。让我们来看看它是如何工作的。
代码块 在 Markdown 中添加代码块非常容易。只需要用三个反引号（```）将代码放置在其中即可，例如：
print(&amp;#34;Hello World!&amp;#34;) 这将会输出 &amp;ldquo;Hello World!&amp;quot;，因为我们使用了 Python 的 print 函数。
标题 在 Markdown 中添加标题也很容易。只需要在想要添加标题的行的前面加上一个 # 号就可以了。例如：
这是一个 H3 标题 这将呈现为一个 H3 大小的标题。
段落 段落是文本中最基本的单位。在 Markdown 中，段落之间用一个空白行分隔开来。例如：
这是一个段落。
这是另一个段落。
序号 如果您需要添加序号，可以使用 Markdown 中的有序列表。只需要在每一行前面添加一个数字和一个句点。例如：
第一项 第二项 第三项 这将显示为一个有序列表。
图片 如果您需要在 Markdown 中添加图片，也非常简单。只需要使用 ![alt text](image-url) 语法结构，在中括号内输入替代文本，在括号内输入图片 URL。例如：
这将会显示一只可爱的猫咪的照片。
现在您已经知道了 Markdown 的基础语法，开始使用它来使您的文档更加优美和易读吧！以上就是关于 Markdown 示例的内容。</description>
    </item>
    
    <item>
      <title>caption</title>
      <link>/posts/caption/</link>
      <pubDate>Sun, 09 Apr 2023 10:58:08 -0400</pubDate>
      
      <guid>/posts/caption/</guid>
      <description>语聊接入声网字幕 语聊房 接入微软字幕时序图 用户通过客户端cc按钮开启字幕,请求到服务端 服务端判断是否有开启字幕的权限,如果没有,则返回错误；如果有,则通知客户端,开始推流 客户端收到推流通知,开始推流给微软字幕,并得到字幕文本,之后将文本上传给服务端 服务端收到客户端的文本,并将文本广播给房间内的其他用户 客户端其他用户收到文本,并将文本显示在评论区 房主关闭房间,服务端通知客户端停止推流 用户退出房间,如房间无人是vip,或无人使用体验卡,服务端通知客户端停止推流 sequencediagram participant 客户端 participant 服务端 participant 微软 note over 客户端: 开启字幕 客户端-&amp;gt;&amp;gt;服务端: 通过cc按钮开启字幕 服务端-&amp;gt;&amp;gt;客户端: 开启字幕成功,通知客户端开始推流 客户端-&amp;gt;&amp;gt;微软: 推流 微软-&amp;gt;&amp;gt;客户端: 文本 客户端-&amp;gt;&amp;gt;服务端: 上传文本 服务端-&amp;gt;&amp;gt;客户端: 广播文本给房间其他用户 note over 客户端: 关闭字幕 客户端-&amp;gt;&amp;gt;服务端: 有人退出房间/关闭房间/关闭cc 服务端-&amp;gt;&amp;gt;客户端: 判断达到关闭字幕条件,通知客户端停止推流 客户端-&amp;gt;&amp;gt;微软: 停止推流 语聊房接入 声网字幕时序图 服务端调用声网字幕api start 由 声网字幕 通过sdk 广播文本给房间内其他客户端,不由服务端广播 客户端收到 声网字幕文本回调 仍然需要上传文本给服务端,服务端维护字幕历史记录 用户进入房间,查看历史记录,由服务端返回历史记录 用户退出房间,如房间无人是vip,或无人使用体验卡,服务端调用声网字幕api stop 服务端调用声网字幕api stop 后,声网字幕不会再回调文本给客户端 sequencediagram participant 客户端 participant 服务端 participant 声网字幕 note over 客户端: 开启字幕 客户端-&amp;gt;&amp;gt;服务端: 通过cc按钮开启字幕 服务端-&amp;gt;&amp;gt;声网字幕: 开启字幕 声网字幕-&amp;gt;&amp;gt;客户端: 回调广播文本 客户端-&amp;gt;&amp;gt;服务端: 上传文本给服务端存储 note over 客户端: 查看历史字幕 客户端-&amp;gt;&amp;gt;服务端: 查看历史字幕 服务端-&amp;gt;&amp;gt;客户端: 返回历史字幕 note over 客户端: 关闭字幕 客户端-&amp;gt;&amp;gt;服务端: 有人退出房间/关闭房间/关闭cc 服务端-&amp;gt;&amp;gt;声网字幕: 停止字幕 声网字幕-&amp;gt;&amp;gt;客户端: 不再回调文本 与微软字幕对比 微软字幕是服务端通过信令通知客户端,客户端推流给微软字幕,微软字幕返回文本,客户端上传文本给服务端,服务端广播 声网字幕是服务端调用声网字幕api start,声网字幕通过sdk广播文本给客户端,客户端上传文本给服务端,服务端维护历史 使用声网字幕引擎:老版本用户的情况 开启声网字幕时,声网会通过sdk回调广播文本到客户端,这个不区分新老版本 老版本用户客户端因为 没有对回调的文本进行处理,所以不会显示字幕 假设语聊字幕对所有人都能使用的情况下:开启声网字幕,会有以下情况</description>
    </item>
    
    <item>
      <title>Chapter VI: Esmeralda</title>
      <link>/posts/chapter-6/</link>
      <pubDate>Fri, 14 Apr 2017 11:25:05 -0400</pubDate>
      
      <guid>/posts/chapter-6/</guid>
      <description>We are delighted to be able to inform the reader, that during the whole of this scene, Gringoire and his piece had stood firm. His actors, spurred on by him, had not ceased to spout his comedy, and he had not ceased to listen to it. He had made up his mind about the tumult, and was determined to proceed to the end, not giving up the hope of a return of attention on the part of the public.</description>
    </item>
    
    <item>
      <title>Chapter I: The Grand Hall</title>
      <link>/posts/chapter-1/</link>
      <pubDate>Sun, 09 Apr 2017 10:58:08 -0400</pubDate>
      
      <guid>/posts/chapter-1/</guid>
      <description>Three hundred and forty-eight years, six months, and nineteen days ago to-day, the Parisians awoke to the sound of all the bells in the triple circuit of the city, the university, and the town ringing a full peal.
The sixth of January, 1482, is not, however, a day of which history has preserved the memory. There was nothing notable in the event which thus set the bells and the bourgeois of Paris in a ferment from early morning.</description>
    </item>
    
  </channel>
</rss>
