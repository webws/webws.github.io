<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on 套路猿</title>
    <link>/tags/docker/</link>
    <description>Recent content in docker on 套路猿</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 08 Jun 2023 21:36:22 +0800</lastBuildDate><atom:link href="/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>k8s &#43; docker 基于 kubeadm 多节点集群部署</title>
      <link>/posts/install-k8s/</link>
      <pubDate>Thu, 08 Jun 2023 21:36:22 +0800</pubDate>
      
      <guid>/posts/install-k8s/</guid>
      <description>k8s + docker 基于 kubeadm 多节点集群部署 博客文章地址:https://blog.taoluyuan.com/posts/install-k8s/
各个节点环境准备 [环境准备] 这章的操作都要在两台机器上分别执行,我准备了两台机器,如下:
一台master,一台node 主机1(master) ip:192.168.31.122,主机2 192.168.31.166 已转好docker环境 1. docker 安装 如已经安装好docker 可跳过 docker 官方安装 https://docs.docker.com/engine/install/ubuntu/ 有点慢 清华大学 镜像安装方法 https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/
安装依赖
sudo apt-get install ca-certificates curl gnupg sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg echo \ &amp;#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \ &amp;#34;$(. /etc/os-release &amp;amp;&amp;amp; echo &amp;#34;$VERSION_CODENAME&amp;#34;)&amp;#34; stable&amp;#34; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null 安装 docker-ce</description>
    </item>
    
    <item>
      <title>Makefile 与 docker 进行多服务 一次性构建</title>
      <link>/posts/docker-makefile/</link>
      <pubDate>Tue, 16 May 2023 22:49:57 +0800</pubDate>
      
      <guid>/posts/docker-makefile/</guid>
      <description>文章博客地址:https://blog.taoluyuan.com/posts/docker-makefile/
本机多服务一次性构建背景 本机开发多个服务,每个服务还会互相调用 正常情况,开发者需要在本地启动多个服务,并且手动调用 想着不使用gitlab ci/cd, 在本机快速通过 makefile+docker-compose 编排多个服务 可执行源码在:https://github.com/webws/go-moda/tree/main/example/tracing/moda_tracing 正常cicd流程 本机 makefile +docker 部署流程 开发者写好功能,本地 go build 为二进制包 dockerfile 基于 alpha 镜像,运行二进制包 docker-compose 编排执行 dockerfile 运行多个服 golang 服务说明 ├── api1_http │ ├── main.go ├── api2_http │ ├── main.go ├── api3_http │ ├── main.go ├── grpc │ ├── main.go ├── Makefile |── docker-compose.yaml 四个golang服务,只需要知道他们是golang服务即可,3个api,1个grpc
编写makefile SERVICES = api1_http api2_http api3_http grpc DOCKERFILE_CONTENT = FROM alpine:latest\nWORKDIR /app # 定义 alpine:3.12 镜像为基础镜像 IMAGE = alpine:3.</description>
    </item>
    
  </channel>
</rss>
