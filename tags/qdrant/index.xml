<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>qdrant on 套路猿</title>
    <link>/tags/qdrant/</link>
    <description>Recent content in qdrant on 套路猿</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 22 Sep 2023 00:33:34 +0800</lastBuildDate><atom:link href="/tags/qdrant/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang 结合 cobra 使用 chatgpt  qdrant 实现 ai知识库 cli</title>
      <link>/posts/kbai/</link>
      <pubDate>Fri, 22 Sep 2023 00:33:34 +0800</pubDate>
      
      <guid>/posts/kbai/</guid>
      <description>golang 结合 cobra 使用 chatgpt qdrant 实现 ai知识库 cli 流程 将数据集 通过 openai embedding 得到向量+组装payload,存入 qdrant 用户进行问题搜索,通过 openai embedding 得到向量,从 qdrant 中搜索相似度大于0.8的数据 从 qdrant 中取出数据得到参考答案 将问题标题+参考答案,组装成promot 向gpt进行提问,得到偏向于 已有知识库设定的扩展知识回答 kabi 知识库的导入和搜索 仓库地址:https://github.com/webws/embedding-knowledge-base
kabi 是使用 golang 基于 openai chatgpt embedding + qdrant 实现知识库的导入和问答
❯ kabi -h a local knowledge base, based on chatgpt and qdrant usage: kbai [flags] kbai [command] available commands: completion generate the autocompletion script for the specified shell help help about any command import import data to vector database search ask the knowledge base example: kbai ask --msg &amp;#39;first, the chicken or the egg&amp;#39; flags: --apikey string openai apikey:default from env apikey --collection string qdrant collection name default: kubernetes (default &amp;#34;kubernetes&amp;#34;) -h, --help help for kbai --proxy string http client proxy default:socks5://127.</description>
    </item>
    
    <item>
      <title> 使用golang 基于 OpenAI Embedding &#43; qdrant 实现k8s本地知识库</title>
      <link>/posts/embedding-openai/</link>
      <pubDate>Fri, 26 May 2023 01:03:00 +0800</pubDate>
      
      <guid>/posts/embedding-openai/</guid>
      <description>使用golang 基于 OpenAI Embedding + qdrant 实现k8s本地知识库 文章博客地址:套路猿-使用golang 基于 OpenAI Embedding + qdrant 实现k8s本地知识库
流程 将数据集 通过 openai embedding 得到向量+组装payload,存入 qdrant 用户进行问题搜索,通过 openai embedding 得到向量,从 qdrant 中搜索相似度大于0.8的数据 从 qdrant 中取出相似度高的数据 将获取到的QA,组装成 prompt 向chatgpt进行提问,得到回答 向量数据库 qdrant qdrant 是一个开源的向量搜索引擎,支持多种向量距离计算方式 官方文档:https://qdrant.tech/documentation/quick_start/ 本节 介绍 qdrant 都是基于官方文档的例子,如已熟悉可以直接阅读下一节 [数据导入k8s知识库] 安装 qdrant docker 安装
docker pull qdrant/qdrant &amp;amp;&amp;amp; \ docker run -p 6333:6333 -p 6334:6334 qdrant/qdrant collection 说明 collection 是 qdrant 中的一个概念,类似于 mysql 中的 database,用于区分不同的数据集合 官方文档:https://qdrant.tech/documentation/collections/#collections collection 下面是 collection 字段说明,以创建 collection 为例</description>
    </item>
    
  </channel>
</rss>
